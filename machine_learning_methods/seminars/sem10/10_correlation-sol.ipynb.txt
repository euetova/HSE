{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Корреляция Пирсона"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Foodmart product sales "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "sales = pd.read_csv('foodmart.sales.tsv', sep = '\\t', header = 0, parse_dates = [2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_id</th>\n",
       "      <th>store_id</th>\n",
       "      <th>date</th>\n",
       "      <th>sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>1997-01-01</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>25</td>\n",
       "      <td>6</td>\n",
       "      <td>1997-01-01</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>48</td>\n",
       "      <td>6</td>\n",
       "      <td>1997-01-01</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>76</td>\n",
       "      <td>6</td>\n",
       "      <td>1997-01-01</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>119</td>\n",
       "      <td>6</td>\n",
       "      <td>1997-01-01</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   product_id  store_id       date  sales\n",
       "0           4         6 1997-01-01      4\n",
       "1          25         6 1997-01-01      3\n",
       "2          48         6 1997-01-01      3\n",
       "3          76         6 1997-01-01      4\n",
       "4         119         6 1997-01-01      3"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sales.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "products = pd.read_csv('foodmart.products.tsv', sep = '\\t', header = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_class_id</th>\n",
       "      <th>product_id</th>\n",
       "      <th>brand_name</th>\n",
       "      <th>product_name</th>\n",
       "      <th>SKU</th>\n",
       "      <th>SRP</th>\n",
       "      <th>gross_weight</th>\n",
       "      <th>net_weight</th>\n",
       "      <th>recyclable_package</th>\n",
       "      <th>low_fat</th>\n",
       "      <th>units_per_case</th>\n",
       "      <th>cases_per_pallet</th>\n",
       "      <th>shelf_width</th>\n",
       "      <th>shelf_height</th>\n",
       "      <th>shelf_depth</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>30</td>\n",
       "      <td>1</td>\n",
       "      <td>Washington</td>\n",
       "      <td>Washington Berry Juice</td>\n",
       "      <td>90748583674</td>\n",
       "      <td>2.85</td>\n",
       "      <td>8.39</td>\n",
       "      <td>6.39</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>30</td>\n",
       "      <td>14</td>\n",
       "      <td>16.9</td>\n",
       "      <td>12.60</td>\n",
       "      <td>7.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>52</td>\n",
       "      <td>2</td>\n",
       "      <td>Washington</td>\n",
       "      <td>Washington Mango Drink</td>\n",
       "      <td>96516502499</td>\n",
       "      <td>0.74</td>\n",
       "      <td>7.42</td>\n",
       "      <td>4.42</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>18</td>\n",
       "      <td>8</td>\n",
       "      <td>13.4</td>\n",
       "      <td>3.71</td>\n",
       "      <td>22.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>52</td>\n",
       "      <td>3</td>\n",
       "      <td>Washington</td>\n",
       "      <td>Washington Strawberry Drink</td>\n",
       "      <td>58427771925</td>\n",
       "      <td>0.83</td>\n",
       "      <td>13.10</td>\n",
       "      <td>11.10</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>17</td>\n",
       "      <td>13</td>\n",
       "      <td>14.4</td>\n",
       "      <td>11.00</td>\n",
       "      <td>7.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>19</td>\n",
       "      <td>4</td>\n",
       "      <td>Washington</td>\n",
       "      <td>Washington Cream Soda</td>\n",
       "      <td>64412155747</td>\n",
       "      <td>3.64</td>\n",
       "      <td>10.60</td>\n",
       "      <td>9.60</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>26</td>\n",
       "      <td>10</td>\n",
       "      <td>22.9</td>\n",
       "      <td>18.90</td>\n",
       "      <td>7.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>19</td>\n",
       "      <td>5</td>\n",
       "      <td>Washington</td>\n",
       "      <td>Washington Diet Soda</td>\n",
       "      <td>85561191439</td>\n",
       "      <td>2.19</td>\n",
       "      <td>6.66</td>\n",
       "      <td>4.65</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>7</td>\n",
       "      <td>10</td>\n",
       "      <td>20.7</td>\n",
       "      <td>21.90</td>\n",
       "      <td>19.20</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   product_class_id  product_id  brand_name                 product_name  \\\n",
       "0                30           1  Washington       Washington Berry Juice   \n",
       "1                52           2  Washington       Washington Mango Drink   \n",
       "2                52           3  Washington  Washington Strawberry Drink   \n",
       "3                19           4  Washington        Washington Cream Soda   \n",
       "4                19           5  Washington         Washington Diet Soda   \n",
       "\n",
       "           SKU   SRP  gross_weight  net_weight recyclable_package low_fat  \\\n",
       "0  90748583674  2.85          8.39        6.39              False   False   \n",
       "1  96516502499  0.74          7.42        4.42              False    True   \n",
       "2  58427771925  0.83         13.10       11.10               True    True   \n",
       "3  64412155747  3.64         10.60        9.60               True   False   \n",
       "4  85561191439  2.19          6.66        4.65               True   False   \n",
       "\n",
       "   units_per_case  cases_per_pallet  shelf_width  shelf_height  shelf_depth  \n",
       "0              30                14         16.9         12.60         7.40  \n",
       "1              18                 8         13.4          3.71        22.60  \n",
       "2              17                13         14.4         11.00         7.77  \n",
       "3              26                10         22.9         18.90         7.93  \n",
       "4               7                10         20.7         21.90        19.20  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "products.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "sales = sales.merge(products[['product_id', 'product_name']], \n",
    "                    on = ['product_id'], how = 'inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_id</th>\n",
       "      <th>store_id</th>\n",
       "      <th>date</th>\n",
       "      <th>sales</th>\n",
       "      <th>product_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>1997-01-01</td>\n",
       "      <td>4</td>\n",
       "      <td>Washington Cream Soda</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>1997-01-05</td>\n",
       "      <td>3</td>\n",
       "      <td>Washington Cream Soda</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>1997-01-06</td>\n",
       "      <td>2</td>\n",
       "      <td>Washington Cream Soda</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>17</td>\n",
       "      <td>1997-01-11</td>\n",
       "      <td>2</td>\n",
       "      <td>Washington Cream Soda</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>24</td>\n",
       "      <td>1997-01-11</td>\n",
       "      <td>2</td>\n",
       "      <td>Washington Cream Soda</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   product_id  store_id       date  sales           product_name\n",
       "0           4         6 1997-01-01      4  Washington Cream Soda\n",
       "1           4         7 1997-01-05      3  Washington Cream Soda\n",
       "2           4         6 1997-01-06      2  Washington Cream Soda\n",
       "3           4        17 1997-01-11      2  Washington Cream Soda\n",
       "4           4        24 1997-01-11      2  Washington Cream Soda"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sales.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Взаимное влияние продуктов друг на друга"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "sparse_sales = pd.pivot_table(sales, values='sales', index=['date', 'store_id'],\n",
    "                     columns=['product_name'], fill_value = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_name</th>\n",
       "      <th>ADJ Rosy Sunglasses</th>\n",
       "      <th>Akron City Map</th>\n",
       "      <th>Akron Eyeglass Screwdriver</th>\n",
       "      <th>American Beef Bologna</th>\n",
       "      <th>American Chicken Hot Dogs</th>\n",
       "      <th>American Cole Slaw</th>\n",
       "      <th>American Corned Beef</th>\n",
       "      <th>American Foot-Long Hot Dogs</th>\n",
       "      <th>American Low Fat Bologna</th>\n",
       "      <th>American Low Fat Cole Slaw</th>\n",
       "      <th>...</th>\n",
       "      <th>Washington Apple Juice</th>\n",
       "      <th>Washington Berry Juice</th>\n",
       "      <th>Washington Cola</th>\n",
       "      <th>Washington Cranberry Juice</th>\n",
       "      <th>Washington Cream Soda</th>\n",
       "      <th>Washington Diet Cola</th>\n",
       "      <th>Washington Diet Soda</th>\n",
       "      <th>Washington Mango Drink</th>\n",
       "      <th>Washington Orange Juice</th>\n",
       "      <th>Washington Strawberry Drink</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th>store_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">1997-01-01</th>\n",
       "      <th>6</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">1997-01-02</th>\n",
       "      <th>11</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1997-01-03</th>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 1559 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "product_name         ADJ Rosy Sunglasses  Akron City Map  \\\n",
       "date       store_id                                        \n",
       "1997-01-01 6                           0               0   \n",
       "           14                          0               0   \n",
       "1997-01-02 11                          0               0   \n",
       "           23                          0               0   \n",
       "1997-01-03 7                           0               0   \n",
       "\n",
       "product_name         Akron Eyeglass Screwdriver  American Beef Bologna  \\\n",
       "date       store_id                                                      \n",
       "1997-01-01 6                                  0                      0   \n",
       "           14                                 0                      0   \n",
       "1997-01-02 11                                 0                      0   \n",
       "           23                                 0                      0   \n",
       "1997-01-03 7                                  0                      0   \n",
       "\n",
       "product_name         American Chicken Hot Dogs  American Cole Slaw  \\\n",
       "date       store_id                                                  \n",
       "1997-01-01 6                                 0                   0   \n",
       "           14                                0                   0   \n",
       "1997-01-02 11                                0                   0   \n",
       "           23                                0                   0   \n",
       "1997-01-03 7                                 0                   0   \n",
       "\n",
       "product_name         American Corned Beef  American Foot-Long Hot Dogs  \\\n",
       "date       store_id                                                      \n",
       "1997-01-01 6                            0                            0   \n",
       "           14                           0                            0   \n",
       "1997-01-02 11                           0                            0   \n",
       "           23                           0                            0   \n",
       "1997-01-03 7                            0                            0   \n",
       "\n",
       "product_name         American Low Fat Bologna  American Low Fat Cole Slaw  \\\n",
       "date       store_id                                                         \n",
       "1997-01-01 6                                0                           0   \n",
       "           14                               0                           0   \n",
       "1997-01-02 11                               0                           0   \n",
       "           23                               0                           0   \n",
       "1997-01-03 7                                0                           0   \n",
       "\n",
       "product_name                    ...               Washington Apple Juice  \\\n",
       "date       store_id             ...                                        \n",
       "1997-01-01 6                    ...                                    0   \n",
       "           14                   ...                                    0   \n",
       "1997-01-02 11                   ...                                    0   \n",
       "           23                   ...                                    0   \n",
       "1997-01-03 7                    ...                                    0   \n",
       "\n",
       "product_name         Washington Berry Juice  Washington Cola  \\\n",
       "date       store_id                                            \n",
       "1997-01-01 6                              0                0   \n",
       "           14                             0                0   \n",
       "1997-01-02 11                             0                0   \n",
       "           23                             0                0   \n",
       "1997-01-03 7                              4                0   \n",
       "\n",
       "product_name         Washington Cranberry Juice  Washington Cream Soda  \\\n",
       "date       store_id                                                      \n",
       "1997-01-01 6                                  0                      4   \n",
       "           14                                 0                      0   \n",
       "1997-01-02 11                                 0                      0   \n",
       "           23                                 0                      0   \n",
       "1997-01-03 7                                  0                      0   \n",
       "\n",
       "product_name         Washington Diet Cola  Washington Diet Soda  \\\n",
       "date       store_id                                               \n",
       "1997-01-01 6                            0                     0   \n",
       "           14                           0                     0   \n",
       "1997-01-02 11                           0                     0   \n",
       "           23                           0                     0   \n",
       "1997-01-03 7                            0                     0   \n",
       "\n",
       "product_name         Washington Mango Drink  Washington Orange Juice  \\\n",
       "date       store_id                                                    \n",
       "1997-01-01 6                              0                        0   \n",
       "           14                             0                        0   \n",
       "1997-01-02 11                             0                        0   \n",
       "           23                             0                        0   \n",
       "1997-01-03 7                              0                        0   \n",
       "\n",
       "product_name         Washington Strawberry Drink  \n",
       "date       store_id                               \n",
       "1997-01-01 6                                   0  \n",
       "           14                                  0  \n",
       "1997-01-02 11                                  0  \n",
       "           23                                  0  \n",
       "1997-01-03 7                                   0  \n",
       "\n",
       "[5 rows x 1559 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sparse_sales.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "sales_correlation = sparse_sales.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>product_name</th>\n",
       "      <th>ADJ Rosy Sunglasses</th>\n",
       "      <th>Akron City Map</th>\n",
       "      <th>Akron Eyeglass Screwdriver</th>\n",
       "      <th>American Beef Bologna</th>\n",
       "      <th>American Chicken Hot Dogs</th>\n",
       "      <th>American Cole Slaw</th>\n",
       "      <th>American Corned Beef</th>\n",
       "      <th>American Foot-Long Hot Dogs</th>\n",
       "      <th>American Low Fat Bologna</th>\n",
       "      <th>American Low Fat Cole Slaw</th>\n",
       "      <th>...</th>\n",
       "      <th>Washington Apple Juice</th>\n",
       "      <th>Washington Berry Juice</th>\n",
       "      <th>Washington Cola</th>\n",
       "      <th>Washington Cranberry Juice</th>\n",
       "      <th>Washington Cream Soda</th>\n",
       "      <th>Washington Diet Cola</th>\n",
       "      <th>Washington Diet Soda</th>\n",
       "      <th>Washington Mango Drink</th>\n",
       "      <th>Washington Orange Juice</th>\n",
       "      <th>Washington Strawberry Drink</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>product_name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ADJ Rosy Sunglasses</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.076608</td>\n",
       "      <td>-0.006581</td>\n",
       "      <td>0.038685</td>\n",
       "      <td>0.041105</td>\n",
       "      <td>-0.045887</td>\n",
       "      <td>-0.008466</td>\n",
       "      <td>0.062309</td>\n",
       "      <td>0.033752</td>\n",
       "      <td>-0.009656</td>\n",
       "      <td>...</td>\n",
       "      <td>0.053533</td>\n",
       "      <td>0.072249</td>\n",
       "      <td>0.061736</td>\n",
       "      <td>-0.000735</td>\n",
       "      <td>0.000843</td>\n",
       "      <td>0.028226</td>\n",
       "      <td>0.012653</td>\n",
       "      <td>0.089932</td>\n",
       "      <td>0.072668</td>\n",
       "      <td>0.035745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Akron City Map</th>\n",
       "      <td>0.076608</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.026297</td>\n",
       "      <td>0.088709</td>\n",
       "      <td>0.061144</td>\n",
       "      <td>0.039347</td>\n",
       "      <td>0.019767</td>\n",
       "      <td>-0.005998</td>\n",
       "      <td>0.010270</td>\n",
       "      <td>0.078176</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.021793</td>\n",
       "      <td>0.020514</td>\n",
       "      <td>0.051956</td>\n",
       "      <td>-0.001018</td>\n",
       "      <td>-0.032582</td>\n",
       "      <td>0.007142</td>\n",
       "      <td>0.035274</td>\n",
       "      <td>0.033875</td>\n",
       "      <td>0.078070</td>\n",
       "      <td>0.051952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Akron Eyeglass Screwdriver</th>\n",
       "      <td>-0.006581</td>\n",
       "      <td>0.026297</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.040851</td>\n",
       "      <td>0.034345</td>\n",
       "      <td>0.108726</td>\n",
       "      <td>0.007573</td>\n",
       "      <td>0.162355</td>\n",
       "      <td>0.020933</td>\n",
       "      <td>0.074292</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000237</td>\n",
       "      <td>-0.001297</td>\n",
       "      <td>0.049793</td>\n",
       "      <td>0.055047</td>\n",
       "      <td>0.031202</td>\n",
       "      <td>0.013510</td>\n",
       "      <td>-0.017855</td>\n",
       "      <td>0.022714</td>\n",
       "      <td>0.003156</td>\n",
       "      <td>0.163519</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>American Beef Bologna</th>\n",
       "      <td>0.038685</td>\n",
       "      <td>0.088709</td>\n",
       "      <td>-0.040851</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.014780</td>\n",
       "      <td>-0.039118</td>\n",
       "      <td>-0.007890</td>\n",
       "      <td>-0.008264</td>\n",
       "      <td>-0.045949</td>\n",
       "      <td>0.085975</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000197</td>\n",
       "      <td>0.081151</td>\n",
       "      <td>-0.053404</td>\n",
       "      <td>-0.021832</td>\n",
       "      <td>0.003286</td>\n",
       "      <td>0.090774</td>\n",
       "      <td>-0.031954</td>\n",
       "      <td>0.043843</td>\n",
       "      <td>0.080638</td>\n",
       "      <td>0.055211</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>American Chicken Hot Dogs</th>\n",
       "      <td>0.041105</td>\n",
       "      <td>0.061144</td>\n",
       "      <td>0.034345</td>\n",
       "      <td>0.014780</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.005336</td>\n",
       "      <td>0.017765</td>\n",
       "      <td>0.057972</td>\n",
       "      <td>0.071549</td>\n",
       "      <td>0.052460</td>\n",
       "      <td>...</td>\n",
       "      <td>0.098935</td>\n",
       "      <td>-0.024224</td>\n",
       "      <td>0.066212</td>\n",
       "      <td>0.043765</td>\n",
       "      <td>0.077541</td>\n",
       "      <td>0.045038</td>\n",
       "      <td>-0.037246</td>\n",
       "      <td>0.025975</td>\n",
       "      <td>0.129795</td>\n",
       "      <td>-0.008498</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 1559 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "product_name                ADJ Rosy Sunglasses  Akron City Map  \\\n",
       "product_name                                                      \n",
       "ADJ Rosy Sunglasses                    1.000000        0.076608   \n",
       "Akron City Map                         0.076608        1.000000   \n",
       "Akron Eyeglass Screwdriver            -0.006581        0.026297   \n",
       "American Beef Bologna                  0.038685        0.088709   \n",
       "American Chicken Hot Dogs              0.041105        0.061144   \n",
       "\n",
       "product_name                Akron Eyeglass Screwdriver  American Beef Bologna  \\\n",
       "product_name                                                                    \n",
       "ADJ Rosy Sunglasses                          -0.006581               0.038685   \n",
       "Akron City Map                                0.026297               0.088709   \n",
       "Akron Eyeglass Screwdriver                    1.000000              -0.040851   \n",
       "American Beef Bologna                        -0.040851               1.000000   \n",
       "American Chicken Hot Dogs                     0.034345               0.014780   \n",
       "\n",
       "product_name                American Chicken Hot Dogs  American Cole Slaw  \\\n",
       "product_name                                                                \n",
       "ADJ Rosy Sunglasses                          0.041105           -0.045887   \n",
       "Akron City Map                               0.061144            0.039347   \n",
       "Akron Eyeglass Screwdriver                   0.034345            0.108726   \n",
       "American Beef Bologna                        0.014780           -0.039118   \n",
       "American Chicken Hot Dogs                    1.000000           -0.005336   \n",
       "\n",
       "product_name                American Corned Beef  American Foot-Long Hot Dogs  \\\n",
       "product_name                                                                    \n",
       "ADJ Rosy Sunglasses                    -0.008466                     0.062309   \n",
       "Akron City Map                          0.019767                    -0.005998   \n",
       "Akron Eyeglass Screwdriver              0.007573                     0.162355   \n",
       "American Beef Bologna                  -0.007890                    -0.008264   \n",
       "American Chicken Hot Dogs               0.017765                     0.057972   \n",
       "\n",
       "product_name                American Low Fat Bologna  \\\n",
       "product_name                                           \n",
       "ADJ Rosy Sunglasses                         0.033752   \n",
       "Akron City Map                              0.010270   \n",
       "Akron Eyeglass Screwdriver                  0.020933   \n",
       "American Beef Bologna                      -0.045949   \n",
       "American Chicken Hot Dogs                   0.071549   \n",
       "\n",
       "product_name                American Low Fat Cole Slaw  \\\n",
       "product_name                                             \n",
       "ADJ Rosy Sunglasses                          -0.009656   \n",
       "Akron City Map                                0.078176   \n",
       "Akron Eyeglass Screwdriver                    0.074292   \n",
       "American Beef Bologna                         0.085975   \n",
       "American Chicken Hot Dogs                     0.052460   \n",
       "\n",
       "product_name                           ...               \\\n",
       "product_name                           ...                \n",
       "ADJ Rosy Sunglasses                    ...                \n",
       "Akron City Map                         ...                \n",
       "Akron Eyeglass Screwdriver             ...                \n",
       "American Beef Bologna                  ...                \n",
       "American Chicken Hot Dogs              ...                \n",
       "\n",
       "product_name                Washington Apple Juice  Washington Berry Juice  \\\n",
       "product_name                                                                 \n",
       "ADJ Rosy Sunglasses                       0.053533                0.072249   \n",
       "Akron City Map                           -0.021793                0.020514   \n",
       "Akron Eyeglass Screwdriver               -0.000237               -0.001297   \n",
       "American Beef Bologna                     0.000197                0.081151   \n",
       "American Chicken Hot Dogs                 0.098935               -0.024224   \n",
       "\n",
       "product_name                Washington Cola  Washington Cranberry Juice  \\\n",
       "product_name                                                              \n",
       "ADJ Rosy Sunglasses                0.061736                   -0.000735   \n",
       "Akron City Map                     0.051956                   -0.001018   \n",
       "Akron Eyeglass Screwdriver         0.049793                    0.055047   \n",
       "American Beef Bologna             -0.053404                   -0.021832   \n",
       "American Chicken Hot Dogs          0.066212                    0.043765   \n",
       "\n",
       "product_name                Washington Cream Soda  Washington Diet Cola  \\\n",
       "product_name                                                              \n",
       "ADJ Rosy Sunglasses                      0.000843              0.028226   \n",
       "Akron City Map                          -0.032582              0.007142   \n",
       "Akron Eyeglass Screwdriver               0.031202              0.013510   \n",
       "American Beef Bologna                    0.003286              0.090774   \n",
       "American Chicken Hot Dogs                0.077541              0.045038   \n",
       "\n",
       "product_name                Washington Diet Soda  Washington Mango Drink  \\\n",
       "product_name                                                               \n",
       "ADJ Rosy Sunglasses                     0.012653                0.089932   \n",
       "Akron City Map                          0.035274                0.033875   \n",
       "Akron Eyeglass Screwdriver             -0.017855                0.022714   \n",
       "American Beef Bologna                  -0.031954                0.043843   \n",
       "American Chicken Hot Dogs              -0.037246                0.025975   \n",
       "\n",
       "product_name                Washington Orange Juice  \\\n",
       "product_name                                          \n",
       "ADJ Rosy Sunglasses                        0.072668   \n",
       "Akron City Map                             0.078070   \n",
       "Akron Eyeglass Screwdriver                 0.003156   \n",
       "American Beef Bologna                      0.080638   \n",
       "American Chicken Hot Dogs                  0.129795   \n",
       "\n",
       "product_name                Washington Strawberry Drink  \n",
       "product_name                                             \n",
       "ADJ Rosy Sunglasses                            0.035745  \n",
       "Akron City Map                                 0.051952  \n",
       "Akron Eyeglass Screwdriver                     0.163519  \n",
       "American Beef Bologna                          0.055211  \n",
       "American Chicken Hot Dogs                     -0.008498  \n",
       "\n",
       "[5 rows x 1559 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sales_correlation.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>product_name</th>\n",
       "      <th>American Chicken Hot Dogs</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>product_name</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Lake Pimento Loaf</th>\n",
       "      <td>-0.065509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fast Low Fat Chips</th>\n",
       "      <td>-0.061037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PigTail Frozen Sausage Pizza</th>\n",
       "      <td>-0.058960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Plato Decaf Coffee</th>\n",
       "      <td>-0.058481</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Kiwi Lox</th>\n",
       "      <td>-0.057037</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "product_name                  American Chicken Hot Dogs\n",
       "product_name                                           \n",
       "Lake Pimento Loaf                             -0.065509\n",
       "Fast Low Fat Chips                            -0.061037\n",
       "PigTail Frozen Sausage Pizza                  -0.058960\n",
       "Plato Decaf Coffee                            -0.058481\n",
       "Kiwi Lox                                      -0.057037"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "product_name = 'American Chicken Hot Dogs'\n",
    "sales_correlation[[product_name]].sort_values(product_name, ascending = True).head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>min</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>product_name</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Carlson Whole Milk</th>\n",
       "      <td>-0.085064</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pearl Chardonnay Wine</th>\n",
       "      <td>-0.085064</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gulf Coast Malted Milk Balls</th>\n",
       "      <td>-0.082598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sunset Economy Toilet Brush</th>\n",
       "      <td>-0.082598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fast Fudge Brownies</th>\n",
       "      <td>-0.082317</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                   min\n",
       "product_name                          \n",
       "Carlson Whole Milk           -0.085064\n",
       "Pearl Chardonnay Wine        -0.085064\n",
       "Gulf Coast Malted Milk Balls -0.082598\n",
       "Sunset Economy Toilet Brush  -0.082598\n",
       "Fast Fudge Brownies          -0.082317"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "min_corr = pd.DataFrame(sales_correlation.min())\n",
    "min_corr.columns = ['min']\n",
    "min_corr.sort_values(by = 'min').head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>product_name</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Plato French Roast Coffee</th>\n",
       "      <td>0.340598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Just Right Vegetable Soup</th>\n",
       "      <td>0.340598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nationeel Grape Fruit Roll</th>\n",
       "      <td>0.322176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Great Muffins</th>\n",
       "      <td>0.322176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Club Low Fat Cottage Cheese</th>\n",
       "      <td>0.306701</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  max\n",
       "product_name                         \n",
       "Plato French Roast Coffee    0.340598\n",
       "Just Right Vegetable Soup    0.340598\n",
       "Nationeel Grape Fruit Roll   0.322176\n",
       "Great Muffins                0.322176\n",
       "Club Low Fat Cottage Cheese  0.306701"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max_corr = pd.DataFrame(sales_correlation.apply(lambda x : \n",
    "                                                np.max(filter(lambda x : x != 1., x)), \n",
    "                        axis = 1))\n",
    "max_corr.columns = ['max']\n",
    "max_corr.sort_values(by = 'max', ascending = False).head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>product_name</th>\n",
       "      <th>Plato French Roast Coffee</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>product_name</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Plato French Roast Coffee</th>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Just Right Vegetable Soup</th>\n",
       "      <td>0.340598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hermanos Macintosh Apples</th>\n",
       "      <td>0.289095</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tell Tale Macintosh Apples</th>\n",
       "      <td>0.273905</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Consolidated Whitening Toothpast</th>\n",
       "      <td>0.247477</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "product_name                      Plato French Roast Coffee\n",
       "product_name                                               \n",
       "Plato French Roast Coffee                          1.000000\n",
       "Just Right Vegetable Soup                          0.340598\n",
       "Hermanos Macintosh Apples                          0.289095\n",
       "Tell Tale Macintosh Apples                         0.273905\n",
       "Consolidated Whitening Toothpast                   0.247477"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "product_name = 'Plato French Roast Coffee'\n",
    "sales_correlation[[product_name]].sort_values(product_name, ascending = False).head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Пример из домашнего задания"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv('churn_analysis.csv')\n",
    "df = df.drop([\"Unnamed: 0\"], axis = 1)\n",
    "df_treat = df[df['treatment'] == 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "states = df_treat['state'].unique()\n",
    "tables = []\n",
    "for i in range(len(states)):\n",
    "    for j in range(i + 1, len(states)):\n",
    "        a = df_treat[(df_treat['churn'] == 'False.')\n",
    "                         & (df_treat['state'] == states[i])].shape[0]\n",
    "        b = df_treat[(df_treat['churn'] == 'True.')\n",
    "                         & (df_treat['state'] == states[i])].shape[0]\n",
    "        c = df_treat[(df_treat['churn'] == 'False.')\n",
    "                         & (df_treat['state'] == states[j])].shape[0]\n",
    "        d = df_treat[(df_treat['churn'] == 'True.')\n",
    "                         & (df_treat['state'] == states[j])].shape[0]\n",
    "        matrix = [[a, b],[c, d]]\n",
    "        tables.append(matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1275, [[18, 7], [22, 2]])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(tables), tables[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#1 условие: a+b+c+d >= 40\n",
    "#2 условие: (a+c)(a+b)/n >5 и (a+c)(c+d)/n >5 и (b+d)(a+b)/n > 5 и (b+d)(c+d)/n > 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1181"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "not_apply = 0\n",
    "for matrix in tables:\n",
    "    a = matrix[0][0]\n",
    "    b = matrix[0][1]\n",
    "    c = matrix[1][0]\n",
    "    d = matrix[1][1]\n",
    "    n = a+b+c+d\n",
    "    if ((n < 40) or ((a+c)*(a+b)/n <= 5) or ((a+c)*(c+d)/n <=5) or ((b+d)*(a+b)/n <=5)\n",
    "        or ((b+d)*(c+d)/n <=5)):\n",
    "        not_apply += 1\n",
    "not_apply"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy.stats import fisher_exact\n",
    "\n",
    "not_correlated = 0\n",
    "for matrix in tables:\n",
    "    if fisher_exact(matrix)[1] < 0.05:\n",
    "        not_correlated += 1\n",
    "not_correlated"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x190615d8be0>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x190612360b8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.scatter(df['day_calls'], df['mes_estim'], c = 'pink')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pearson corr = -0.051794350587572625, pvalue = 0.0027798836869756707\n",
      "spearman corr = 0.043349880533927444, pvalue = 0.012317367189170541\n"
     ]
    }
   ],
   "source": [
    "from scipy.stats import pearsonr\n",
    "from scipy.stats import spearmanr\n",
    "\n",
    "pearson_corr = pearsonr(df['day_calls'], df['mes_estim'])\n",
    "print('pearson corr = {}, pvalue = {}'.format(*pearson_corr))\n",
    "spearman_corr = spearmanr(df['day_calls'], df['mes_estim'])\n",
    "print('spearman corr = {}, pvalue = {}'.format(*spearman_corr))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "confussion = pd.DataFrame([], index = df_treat.state.unique(), columns = df_treat.churn.unique())\n",
    "for j in df_treat.state.unique():\n",
    "    for i in df_treat.churn.unique():\n",
    "        confussion.at[j, i] = df_treat[(df_treat['state'] == j) & (df_treat['churn'] == i)].shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "V_cramer value: 0.20039321502033322, pvalue = 0.709759004277848\n"
     ]
    }
   ],
   "source": [
    "from scipy.stats import chi2_contingency\n",
    "chi_statistics, p_value, _, _ = chi2_contingency(confussion.values, correction = False)\n",
    "V_cramer = np.sqrt(chi_statistics / (df_treat.shape[0]*(min(confussion.shape)-1)))\n",
    "print('V_cramer value: {}, pvalue = {}'.format(V_cramer,p_value))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_treat_0 = df[df['treatment'] == 0]\n",
    "a = df_treat_0[(df_treat_0['churn'] == 'False.')].shape[0]\n",
    "b = df_treat_0[(df_treat_0['churn'] == 'True.')].shape[0]\n",
    "c = df_treat[(df_treat['churn'] == 'False.')].shape[0]\n",
    "d = df_treat[(df_treat['churn'] == 'True.')].shape[0]\n",
    "\n",
    "n = a+b+c+d\n",
    "use_chi = (n >= 40) or ((a+c)*(a+b)/n > 5) or ((a+c)*(c+d)/n > 5) or ((b+d)*(a+b)/n > 5) or ((b+d)*(c+d)/n > 5)\n",
    "use_chi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.25175249831939217"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "chi2_contingency([[a,b],[c,d]])[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_treat_2 = df[df['treatment'] == 2]\n",
    "a = df_treat_2[(df_treat_2['churn'] == 'False.')].shape[0]\n",
    "b = df_treat_2[(df_treat_2['churn'] == 'True.')].shape[0]\n",
    "c = df_treat[(df_treat['churn'] == 'False.')].shape[0]\n",
    "d = df_treat[(df_treat['churn'] == 'True.')].shape[0]\n",
    "\n",
    "n = a+b+c+d\n",
    "use_chi = (n >= 40) or ((a+c)*(a+b)/n > 5) or ((a+c)*(c+d)/n > 5) or ((b+d)*(a+b)/n > 5) or ((b+d)*(c+d)/n > 5)\n",
    "use_chi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.011135281386020091"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "chi2_contingency([[a,b],[c,d]])[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [conda root]",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
