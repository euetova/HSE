{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Нейронные сети\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "%pylab inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Сначала обучим обычную полносвязную нейронную сеть. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Extracting MNIST_data/train-images-idx3-ubyte.gz\n",
      "Extracting MNIST_data/train-labels-idx1-ubyte.gz\n",
      "Extracting MNIST_data/t10k-images-idx3-ubyte.gz\n",
      "Extracting MNIST_data/t10k-labels-idx1-ubyte.gz\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.examples.tutorials.mnist import input_data\n",
    "mnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def plot_images_separately(images):\n",
    "    \"Plot the six MNIST images separately.\"\n",
    "    fig = plt.figure()\n",
    "    for j in range(1, 7):\n",
    "        ax = fig.add_subplot(1, 6, j)\n",
    "        ax.matshow(np.reshape(images[j-1], (28, 28)), cmap = matplotlib.cm.binary)\n",
    "        plt.xticks(np.array([]))\n",
    "        plt.yticks(np.array([]))\n",
    "    plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nEZGISGv4+pBDDon5Nx8OOuggV7YlLhdccEHc42wYo1iHr827777ryjYEY0PONikMggxd/obyGzZs\nAIKhn3333dcdW7RoUZZanH9//vlnXN1HH33kyrZ87PXXX0/qdffbbz9X9peeFYuXX34ZgHXr1rk6\nmwh4zjnn5KVNxaaioiLfTSho/jmsOhuyBujatetOH2e3t5566qnMNawGipRFREQiInK7REl6/Dzk\ntuwpbFcUq7Po2K+zSV2jRo1yx7p06ZKlFufW9ddf78pDhw4FYicEnnrqqUDsZK1UE+L4k50OP/zw\nlF4jysKWhfTr1w+oeQeeRPn9ruVUUpsmTZrE1dluT506dXJ1Bx98MADPPfdc3ON33313IPbcN3ny\nZCD53Pep0iddREQkInRRFhERiYiCH76+7777XHnFihU7fZxlb/LXqR555JHZa1gEVB9CDBtS9Ots\nqMdyZBfLkLXvhx9+iKv7+++/XdkfyjbHHnssEGzvtnbtWnds5syZO32vmiaPFAM/Y5nx170nY/ny\n5a78wAMPAPDjjz+6Osse2LRp05Rev9DYmvjVq1fHHUskJ0Fd9NBDD7my3S76/fffAXj//ffdsWXL\nlgHh50P7Pvu3nnJNkbKIiEhERC5S9pcA2ObzlmmqtsfXxH4x2UQegC1btqTSxEgbOHCgK69ZswaA\nyspKIDZLzW+//Rb3XJvQUIwRsrENyyF89xdz0UUXuXKrVq0A2GWXXQCYMmVKje9xwgknAHDWWWel\n3M6o8ne7sox+ybLvIgSjVX5EGJY5zXak83feKmbWRxbV+U477bRcNyfSLDe1P8k1bIe76vzHWE76\nfEbIRpGyiIhIROQ9Urbdnuxeb2lpqTsWdj8lXX6kVIzsvnD1MsRGyuPHjwfghRdecHWWWMUShRR6\nnuswBxxwgCuPHTs2pddo1KhRjcevvPJKIL2dpqJq+/btrhw22lIT29986tSprs6S2NSmGEe1alLT\nCKCfq72u+f77713ZzuW2fDFsVztz9NFHu7Llt/f3X37zzTeBIEGQ7eGQD4qURUREIkIXZRERkYjI\n6fjaqlWrALjssstcnQ0b1KR169YA7L333nHHLN81BBlXRo4cCYQPjbVs2TKJFuffxo0bXdkybaXK\nX0phW8KdeeaZrs42ArcJdqNHj07r/YpVWHYpv65t27a5bE5ONWzY0JVt+8+w79kvv/ziyrZh/PDh\nw1N+3wYNGqT83ELkn9cgNpd4MU/E3BlbEjd48GBXF5az3lhOf9tu8fLLL3fHbFld//79XZ0tX7zq\nqqsAWLlyZSaanRJFyiIiIhGR9UjZX840a9YsIPZm/R577AHAXnvtBcDVV1/tjllUe9xxxwFBxFwb\ney1f48aNgcLZvcZ2e/J3tbJI9/HHH8/Y+/i7Fy1evBhIfPJNXWU5xX2nn366Kx9xxBG5bE5O+ZPc\n7PPof14mTpwIxOZULy8vT+m9Onfu7MozZsxI6TUKVfXlZv4ooS3NK3Z2PoIgQvajY8t13bFjRwDG\njRvnjp1yyilAzcse/c/XpEmTALjtttuA2F3i/EliuaBIWUREJCKyHin76fMsQu7du7ers0iw+vKd\nVNj+mJY0w2e7f/h7CkeR3UMeMWIEAC1atHDHMhkhW3ICex9IbMF9XWbLcvz7paYu3n+3z85LL73k\n6vwIIxn+EhZL4ODfV61pX9xisX79elf2U7/WVZ9//rkrW4Tsj5ba8qVU53D4SWo+/PBDIFjy5y/9\nyzVFyiIiIhGhi7KIiEhEZH342nZ8geCG/IQJE7LyXt9++y0QOwxkCiVf7IIFC4Bg8oxln8mEsrIy\nV+7bt2/M+0AwhKhdaMLZ0Kx/e8QmktSV3Yt8tpzOH1pet25dUq8xYMAAIDZne6FMxsw0f8nY5s2b\nY475/VMX2a21fv36ubpUh63t9pP/WjYUHgWKlEVERCIi65GyH0FkK0I2/qQyCKbMQ5CPOOq6d+8O\nBL8MLa8rBEk9/Mlq1feE9qO4pUuXAjB//nwgNs+1vb4/wcYmK9kCeok1atSouDpb0nfUUUflujmR\nNnToUFe2pSfDhg0DYhOt1LWkIGFs32h/r3djI3y9evXKaZuioFOnTq5siaFsWa3P8vj753uzadMm\nIHZE0EYd/L3V7TzYvn17IL/LGhUpi4iIRIQuyiIiIhFR8HvLdejQwZX9rQkhNstSt27dctamdNjQ\ndJ8+fYDYIWfLauMPOVfPg+sPyVRWVgLhQ9XGv6VQKEP8+RKWa9cfYhOYOXMmEJtruK5koEqVZT9b\nu3Zt3LEhQ4YA4d/dYucP2U+bNg2IPUdNnz4dgDlz5gDhuS4sn7//3Q07H1qu7NmzZwP5va2iSFlE\nRCQiCj5S9vPqWhYWy31dyFmWbCmZH/muWLEi7nFWZ7/6/KxcVmc7+/gTxCxPrEXkkhpFgVBRUZHv\nJhQdm/DpZz+sy+zc5S/XtGVj9vlbuHBhQq9lr3HxxRe7uuuuuw6oOVd2rihSFhERiYiCjZTnzZsH\nwNatW12d7QRlu/gUyn3kMLZ38qJFi1yd7cDjKy0tBYJkIM2bN497jC1xUlKQzLPdvCZPnuzqbMcZ\nkUTYvBDlnt+5Hj16ALH7HFuSqLCltkuWLAGCvQP8EUGLiqNKkbKIiEhE6KIsIiISEQU1fO1vZzZ1\n6lQg9sa85TLt379/bhuWRf5w9P333x93PKxOssMyevlbCtpkEz9LlYhknw1N2zKmYqEziYiISEQU\nVKTsL/a2/KWWVxegZ8+eOW+T1B1jxoyJ+VdEJNMUKYuIiESELsoiIiIRUVDD1/XqBc299tpr89gS\nERGRzEv0olwfoKysLItNiT7v/18/yaeq/0i5/9R3/1H/pUf9lzqd+9KTVP9VVVXV+gcMBKr05/4G\nJtJv6r/0+099p/5T/0XqT+e+LPdfSSKp3UpKSpoBvYByYFutTyhe9YE2wOKqqqpNiT5J/eck3X/q\nuxjqv/So/1Knc196Eu6/hC7KIiIikn2afS0iIhIRuiiLiIhEhC7KIiIiEaGLsoiISETooiwiIhIR\nuiiLiIhEhC7KIiIiEfF/jnn5m5FXdnoAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f85794e14e0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0.  0.  0.  0.  0.  0.  0.  1.  0.  0.]\n",
      " [ 0.  0.  0.  1.  0.  0.  0.  0.  0.  0.]\n",
      " [ 0.  0.  0.  0.  1.  0.  0.  0.  0.  0.]\n",
      " [ 0.  0.  0.  0.  0.  0.  1.  0.  0.  0.]\n",
      " [ 0.  1.  0.  0.  0.  0.  0.  0.  0.  0.]\n",
      " [ 0.  0.  0.  0.  0.  0.  0.  0.  1.  0.]]\n"
     ]
    }
   ],
   "source": [
    "plot_images_separately(mnist.train.images)\n",
    "print(mnist.train.labels[0:6])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Единицы соответствуют индексу класса"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Однослойная нейронная сеть\n",
    "\n",
    "Построим модель в tensorflow. Tensorflow - это графический фраемворк, предназначенный в первую очередь для работы с нейронными сетями. На самом деле Вы можете создавать здесь любые алгоритмы машинного обучения. Основная идея работы с tensorflow - вы описываете порядок, в котором создаются переменные и выполняются операции, после чего запускаете обсчёт всего графа. \n",
    "\n",
    "В примере ниже мы создаем простейщую модель: \n",
    "$y = \\mbox{softmax}(Wx + b)$\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "MacOS:\n",
    "* sudo easy_install pip\n",
    "* sudo easy_install --upgrade six\n",
    "* export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/mac/tensorflow-0.9.0-py3-none-any.whl\n",
    "* sudo pip3 install --upgrade $TF_BINARY_URL\n",
    "\n",
    "Windows:\n",
    "* Install docker - https://download.docker.com/win/stable/InstallDocker.msi\n",
    "* Download container - docker run -it -p 8888:8888 gcr.io/tensorflow/tensorflow\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "x = tf.placeholder(tf.float32, [None, 784]) \n",
    "W = tf.Variable(tf.zeros([784, 10]))\n",
    "b = tf.Variable(tf.zeros([10]))\n",
    "y = tf.matmul(x, W) + b\n",
    "y_ = tf.placeholder(tf.float32, [None, 10])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Обратите внимание, что в tensorflow существует два вида перменных. \n",
    "tf.placeholder - переменные, значения которых подаются из вне. \n",
    "tf.Variable - переменные, которые как-то определяются внутри графа и могут зависеть от внешних переменных. Только tf.Variable могут быть обучаемыми переменными. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(y, y_))\n",
    "train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 iter, cost 2.302585\n",
      "100 iter, cost 0.265373\n",
      "200 iter, cost 0.290492\n",
      "300 iter, cost 0.233550\n",
      "400 iter, cost 0.544249\n",
      "500 iter, cost 0.274724\n",
      "600 iter, cost 0.228728\n",
      "700 iter, cost 0.284000\n",
      "800 iter, cost 0.240591\n",
      "900 iter, cost 0.217430\n",
      "1000 iter, cost 0.273687\n",
      "1100 iter, cost 0.245773\n",
      "1200 iter, cost 0.241234\n",
      "1300 iter, cost 0.329599\n",
      "1400 iter, cost 0.384582\n",
      "1500 iter, cost 0.317940\n",
      "1600 iter, cost 0.185251\n",
      "1700 iter, cost 0.515755\n",
      "1800 iter, cost 0.366001\n",
      "1900 iter, cost 0.379015\n",
      "2000 iter, cost 0.300145\n",
      "2100 iter, cost 0.372359\n",
      "2200 iter, cost 0.251131\n",
      "2300 iter, cost 0.251245\n",
      "2400 iter, cost 0.377628\n",
      "2500 iter, cost 0.235196\n",
      "2600 iter, cost 0.348499\n",
      "2700 iter, cost 0.443458\n",
      "2800 iter, cost 0.230227\n",
      "2900 iter, cost 0.368336\n",
      "3000 iter, cost 0.295052\n",
      "3100 iter, cost 0.434663\n",
      "3200 iter, cost 0.360172\n",
      "3300 iter, cost 0.203410\n",
      "3400 iter, cost 0.220276\n",
      "3500 iter, cost 0.276192\n",
      "3600 iter, cost 0.363620\n",
      "3700 iter, cost 0.175158\n",
      "3800 iter, cost 0.302078\n",
      "3900 iter, cost 0.192972\n",
      "4000 iter, cost 0.306225\n",
      "4100 iter, cost 0.375776\n",
      "4200 iter, cost 0.285873\n",
      "4300 iter, cost 0.163346\n",
      "4400 iter, cost 0.174466\n",
      "4500 iter, cost 0.158447\n",
      "4600 iter, cost 0.267133\n",
      "4700 iter, cost 0.274828\n",
      "4800 iter, cost 0.388065\n",
      "4900 iter, cost 0.383846\n"
     ]
    }
   ],
   "source": [
    "sess = tf.InteractiveSession()\n",
    "  # Train\n",
    "tf.initialize_all_variables().run()\n",
    "for i in range(5000):\n",
    "    batch_xs, batch_ys = mnist.train.next_batch(100)\n",
    "    cost, _ = sess.run([cross_entropy, train_step], feed_dict={x: batch_xs, y_: batch_ys})\n",
    "    if (i % 100 == 0):\n",
    "        print(\"%d iter, cost %f\" % (i, cost))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9233\n"
     ]
    }
   ],
   "source": [
    "# Test trained model\n",
    "correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))\n",
    "accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n",
    "print(sess.run(accuracy, feed_dict={x: mnist.test.images,\n",
    "                                      y_: mnist.test.labels}))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Нейронная сеть с двумя полносвязными слоями\n",
    "\n",
    "Попробуем добавить промежуточный полносвязный слой. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "x1 = tf.placeholder(tf.float32, [None, 784]) \n",
    "\n",
    "W1 = tf.Variable(tf.zeros([784, 100]))\n",
    "b1 = tf.Variable(tf.zeros([100]))\n",
    "W2 = tf.Variable(tf.zeros([100, 10]))\n",
    "b2 = tf.Variable(tf.zeros([10]))\n",
    "\n",
    "x2 = tf.sigmoid(tf.matmul(x1, W1) + b1)\n",
    "y = tf.nn.softmax(tf.matmul(x2, W2) + b2)\n",
    "\n",
    "y_ = tf.placeholder(tf.float32, [None, 10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))\n",
    "train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Exception ignored in: <bound method BaseSession.__del__ of <tensorflow.python.client.session.InteractiveSession object at 0x7f85785be940>>\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/archy/.local/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 522, in __del__\n",
      "    self.close()\n",
      "  File \"/home/archy/.local/lib/python3.5/site-packages/tensorflow/python/client/session.py\", line 1262, in close\n",
      "    self._default_session.__exit__(None, None, None)\n",
      "  File \"/home/archy/anaconda3/lib/python3.5/contextlib.py\", line 66, in __exit__\n",
      "    next(self.gen)\n",
      "  File \"/home/archy/.local/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 3536, in get_controller\n",
      "    % type(default))\n",
      "AssertionError: Nesting violated for default stack of <class 'weakref'> objects\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 iter, cost 2.302585\n",
      "100 iter, cost 2.277459\n",
      "200 iter, cost 2.040760\n",
      "300 iter, cost 1.841977\n",
      "400 iter, cost 1.813944\n",
      "500 iter, cost 1.668663\n",
      "600 iter, cost 1.421710\n",
      "700 iter, cost 1.181906\n",
      "800 iter, cost 0.716482\n",
      "900 iter, cost 0.782747\n",
      "1000 iter, cost 0.435634\n",
      "1100 iter, cost 0.428862\n",
      "1200 iter, cost 0.456217\n",
      "1300 iter, cost 0.366845\n",
      "1400 iter, cost 0.249427\n",
      "1500 iter, cost 0.361976\n",
      "1600 iter, cost 0.430709\n",
      "1700 iter, cost 0.265916\n",
      "1800 iter, cost 0.260610\n",
      "1900 iter, cost 0.184914\n",
      "2000 iter, cost 0.264893\n",
      "2100 iter, cost 0.292694\n",
      "2200 iter, cost 0.377455\n",
      "2300 iter, cost 0.214893\n",
      "2400 iter, cost 0.153792\n",
      "2500 iter, cost 0.242292\n",
      "2600 iter, cost 0.542443\n",
      "2700 iter, cost 0.348029\n",
      "2800 iter, cost 0.189372\n",
      "2900 iter, cost 0.150312\n",
      "3000 iter, cost 0.235022\n",
      "3100 iter, cost 0.277755\n",
      "3200 iter, cost 0.338690\n",
      "3300 iter, cost 0.187746\n",
      "3400 iter, cost 0.402864\n",
      "3500 iter, cost 0.227085\n",
      "3600 iter, cost 0.344348\n",
      "3700 iter, cost 0.406425\n",
      "3800 iter, cost 0.141283\n",
      "3900 iter, cost 0.210679\n",
      "4000 iter, cost 0.355419\n",
      "4100 iter, cost 0.458511\n",
      "4200 iter, cost 0.161388\n",
      "4300 iter, cost 0.248154\n",
      "4400 iter, cost 0.207242\n",
      "4500 iter, cost 0.163295\n",
      "4600 iter, cost 0.182078\n",
      "4700 iter, cost 0.259725\n",
      "4800 iter, cost 0.303692\n",
      "4900 iter, cost 0.355110\n"
     ]
    }
   ],
   "source": [
    "sess = tf.InteractiveSession()\n",
    "  # Train\n",
    "tf.initialize_all_variables().run()\n",
    "for i in range(5000):\n",
    "    batch_xs, batch_ys = mnist.train.next_batch(100)\n",
    "    cost, _ = sess.run([cross_entropy, train_step], feed_dict={x1: batch_xs, y_: batch_ys})\n",
    "    if (i % 100 == 0):\n",
    "        print(\"%d iter, cost %f\" % (i, cost))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9224\n"
     ]
    }
   ],
   "source": [
    "# Test trained model\n",
    "correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))\n",
    "accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n",
    "print(sess.run(accuracy, feed_dict={x1: mnist.test.images,\n",
    "                                      y_: mnist.test.labels}))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "### Сверточная нейронная сеть"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Convolution:\n",
    "<img src=\"3.jpg\">"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Max pooling:\n",
    "<img src=\"https://upload.wikimedia.org/wikipedia/commons/e/e9/Max_pooling.png\">"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def weight_variable(shape):\n",
    "    initial = tf.truncated_normal(shape, stddev=0.1)\n",
    "    return tf.Variable(initial)\n",
    "\n",
    "def bias_variable(shape):\n",
    "    initial = tf.constant(0.1, shape=shape)\n",
    "    return tf.Variable(initial)\n",
    "\n",
    "def conv2d(x, W):\n",
    "    return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')\n",
    "\n",
    "def max_pool_2x2(x):\n",
    "    return tf.nn.max_pool(x, ksize=[1, 2, 2, 1],\n",
    "                          strides=[1, 2, 2, 1], padding='SAME')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "x_image = tf.reshape(x, [-1,28,28,1])\n",
    "\n",
    "# первый слой\n",
    "W_conv1 = weight_variable([5, 5, 1, 32])\n",
    "b_conv1 = bias_variable([32])\n",
    "\n",
    "h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\n",
    "h_pool1 = max_pool_2x2(h_conv1)\n",
    "\n",
    "#второй слой\n",
    "W_conv2 = weight_variable([5, 5, 32, 64])\n",
    "b_conv2 = bias_variable([64])\n",
    "\n",
    "h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\n",
    "h_pool2 = max_pool_2x2(h_conv2)\n",
    "\n",
    "#полносвязный слой\n",
    "W_fc1 = weight_variable([7 * 7 * 64, 1024])\n",
    "b_fc1 = bias_variable([1024])\n",
    "\n",
    "h_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64])\n",
    "h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "keep_prob = tf.placeholder(tf.float32)\n",
    "h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "W_fc2 = weight_variable([1024, 10])\n",
    "b_fc2 = bias_variable([10])\n",
    "\n",
    "y_conv = tf.matmul(h_fc1_drop, W_fc2) + b_fc2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(y_conv, y_))\n",
    "train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)\n",
    "correct_prediction = tf.equal(tf.argmax(y_conv,1), tf.argmax(y_,1))\n",
    "accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n",
    "sess.run(tf.initialize_all_variables())\n",
    "for i in range(1000):\n",
    "    batch = mnist.train.next_batch(50)\n",
    "    if i%100 == 0:\n",
    "        train_accuracy = accuracy.eval(feed_dict={\n",
    "            x:batch[0], y_: batch[1], keep_prob: 1.0})\n",
    "    print(\"step %d, training accuracy %g\"%(i, train_accuracy))\n",
    "    train_step.run(feed_dict={x: batch[0], y_: batch[1], keep_prob: 0.5})\n",
    "\n",
    "print(\"test accuracy %g\"%accuracy.eval(feed_dict={\n",
    "    x: mnist.test.images, y_: mnist.test.labels, keep_prob: 1.0}))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
