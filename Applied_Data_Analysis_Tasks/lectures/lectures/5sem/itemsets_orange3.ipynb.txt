{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "T = [[1,    3, 4   ],[   2, 3,    5],[1, 2, 3,    5],[   2,       5]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from orangecontrib.associate.fpgrowth import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "itemsets = frequent_itemsets(T, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(frozenset({1}), 2),\n",
       " (frozenset({2}), 3),\n",
       " (frozenset({3}), 3),\n",
       " (frozenset({1, 3}), 2),\n",
       " (frozenset({2, 3}), 2),\n",
       " (frozenset({5}), 3),\n",
       " (frozenset({2, 5}), 3),\n",
       " (frozenset({3, 5}), 2),\n",
       " (frozenset({2, 3, 5}), 2)]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(itemsets)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import Orange"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "data = Orange.data.Table('zoo')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[1, 0, 0, 1, 0, ... | mammal] {aardvark},\n",
       " [1, 0, 0, 1, 0, ... | mammal] {antelope},\n",
       " [0, 0, 1, 0, 0, ... | fish] {bass},\n",
       " [1, 0, 0, 1, 0, ... | mammal] {bear},\n",
       " [1, 0, 0, 1, 0, ... | mammal] {boar},\n",
       " ...\n",
       "]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "X, mapping = OneHot.encode(data, include_class=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[False,  True,  True, ..., False,  True, False],\n",
       "       [False,  True,  True, ..., False,  True, False],\n",
       "       [ True, False,  True, ..., False, False, False],\n",
       "       ..., \n",
       "       [False,  True,  True, ..., False,  True, False],\n",
       "       [ True, False,  True, ...,  True, False, False],\n",
       "       [ True, False, False, ..., False, False, False]], dtype=bool)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0, (0, 0)),\n",
       " (1, (0, 1)),\n",
       " (2, (1, 0)),\n",
       " (3, (1, 1)),\n",
       " (4, (2, 0)),\n",
       " (5, (2, 1)),\n",
       " (6, (3, 0)),\n",
       " (7, (3, 1)),\n",
       " (8, (4, 0)),\n",
       " (9, (4, 1)),\n",
       " (10, (5, 0)),\n",
       " (11, (5, 1)),\n",
       " (12, (6, 0)),\n",
       " (13, (6, 1)),\n",
       " (14, (7, 0)),\n",
       " (15, (7, 1)),\n",
       " (16, (8, 0)),\n",
       " (17, (8, 1)),\n",
       " (18, (9, 0)),\n",
       " (19, (9, 1)),\n",
       " (20, (10, 0)),\n",
       " (21, (10, 1)),\n",
       " (22, (11, 0)),\n",
       " (23, (11, 1)),\n",
       " (24, (12, 0)),\n",
       " (25, (12, 1)),\n",
       " (26, (12, 2)),\n",
       " (27, (12, 3)),\n",
       " (28, (12, 4)),\n",
       " (29, (12, 5)),\n",
       " (30, (13, 0)),\n",
       " (31, (13, 1)),\n",
       " (32, (14, 0)),\n",
       " (33, (14, 1)),\n",
       " (34, (15, 0)),\n",
       " (35, (15, 1)),\n",
       " (36, (16, 0)),\n",
       " (37, (16, 1)),\n",
       " (38, (16, 2)),\n",
       " (39, (16, 3)),\n",
       " (40, (16, 4)),\n",
       " (41, (16, 5)),\n",
       " (42, (16, 6))]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted(mapping.items())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "itemsets = dict(frequent_itemsets(X, .4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "520"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(itemsets)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "class_items = {item for item, var, _ in OneHot.decode(mapping, data, mapping) if var is data.domain.class_var}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[36, 37, 38, 39, 40, 41, 42]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted(class_items)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['amphibian', 'bird', 'fish', 'insect', 'invertebrate', 'mammal', 'reptile']"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.domain.class_var.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "rules = [(P, Q, supp, conf) for P, Q, supp, conf in association_rules(itemsets, .8) if len(Q) == 1 and Q & class_items]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "18"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(rules)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(frozenset({2, 7, 17, 19, 20}), frozenset({41}), 41, 1.0),\n",
       " (frozenset({2, 7, 17, 19}), frozenset({41}), 41, 1.0),\n",
       " (frozenset({7, 17, 19, 20}), frozenset({41}), 41, 1.0),\n",
       " (frozenset({2, 7, 19, 20}), frozenset({41}), 41, 1.0),\n",
       " (frozenset({2, 17, 19, 20}), frozenset({41}), 41, 0.8723404255319149),\n",
       " (frozenset({2, 7, 17, 20}), frozenset({41}), 41, 1.0),\n",
       " (frozenset({2, 7, 20}), frozenset({41}), 41, 1.0),\n",
       " (frozenset({7, 17, 19}), frozenset({41}), 41, 1.0),\n",
       " (frozenset({2, 7, 17}), frozenset({41}), 41, 1.0),\n",
       " (frozenset({7, 17, 20}), frozenset({41}), 41, 1.0),\n",
       " (frozenset({7, 19, 20}), frozenset({41}), 41, 1.0),\n",
       " (frozenset({2, 17, 19}), frozenset({41}), 41, 0.8367346938775511),\n",
       " (frozenset({2, 7, 19}), frozenset({41}), 41, 1.0),\n",
       " (frozenset({7, 19}), frozenset({41}), 41, 1.0),\n",
       " (frozenset({7, 17}), frozenset({41}), 41, 1.0),\n",
       " (frozenset({2, 7}), frozenset({41}), 41, 1.0),\n",
       " (frozenset({7, 20}), frozenset({41}), 41, 1.0),\n",
       " (frozenset({7}), frozenset({41}), 41, 1.0)]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "backbone=1, feathers=0, breathes=1, venomous=0, milk=1 --> type=mammal (supp: 41, conf: 1.0)\n",
      "backbone=1, feathers=0, breathes=1, milk=1 --> type=mammal (supp: 41, conf: 1.0)\n",
      "backbone=1, breathes=1, venomous=0, milk=1 --> type=mammal (supp: 41, conf: 1.0)\n",
      "feathers=0, breathes=1, venomous=0, milk=1 --> type=mammal (supp: 41, conf: 1.0)\n",
      "backbone=1, feathers=0, breathes=1, venomous=0 --> type=mammal (supp: 41, conf: 0.8723404255319149)\n"
     ]
    }
   ],
   "source": [
    "names = {item: '{}={}'.format(var.name, val) for item, var, val in OneHot.decode(mapping, data, mapping)}\n",
    "for ante, cons, supp, conf in rules[:5]:\n",
    "    print(', '.join(names[i] for i in ante), '-->', names[next(iter(cons))], '(supp: {}, conf: {})'.format(supp, conf))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda root]",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
