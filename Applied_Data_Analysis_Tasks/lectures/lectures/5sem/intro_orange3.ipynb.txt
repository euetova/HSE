{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Проверочная #4 - https://goo.gl/forms/R16wpKqZErpKQNA92"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Библиотека анализа данных - Orange"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'3.3.12'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import Orange\n",
    "Orange.version.version"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[n, y, n, y, y, ... | republican],\n",
       " [n, y, n, y, y, ... | republican],\n",
       " [?, y, y, ?, y, ... | democrat],\n",
       " [n, y, y, n, ?, ... | democrat],\n",
       " [y, y, y, n, y, ... | democrat],\n",
       " ...\n",
       "]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = Orange.data.Table(\"voting\")\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "lr = Orange.classification.LogisticRegressionLearner()\n",
    "rf = Orange.classification.RandomForestLearner(n_estimators=100)\n",
    "res = Orange.evaluation.CrossValidation(data, [lr, rf], k=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: [ 0.96321839  0.96321839]\n",
      "AUC: [ 0.99392725  0.99182698]\n"
     ]
    }
   ],
   "source": [
    "print(\"Accuracy:\", Orange.evaluation.scoring.CA(res))\n",
    "print(\"AUC:\", Orange.evaluation.scoring.AUC(res))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[handicapped-infants, water-project-cost-sharing, adoption-of-the-budget-resolution, physician-fee-freeze, el-salvador-aid, religious-groups-in-schools, anti-satellite-test-ban, aid-to-nicaraguan-contras, mx-missile, immigration, synfuels-corporation-cutback, education-spending, superfund-right-to-sue, crime, duty-free-exports, export-administration-act-south-africa | party]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.domain"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Orange - классификация"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "learner = Orange.classification.LogisticRegressionLearner()\n",
    "classifier = learner(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.,  0.,  1.])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "classifier(data[:3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "democrat, originally democrat\n",
      "republican, originally democrat\n",
      "republican, originally republican\n"
     ]
    }
   ],
   "source": [
    "classifier = Orange.classification.LogisticRegressionLearner(data)\n",
    "c_values = data.domain.class_var.values\n",
    "for d in data[5:8]:\n",
    "    c = classifier(d)\n",
    "    print(\"{}, originally {}\".format(c_values[int(classifier(d)[0])], d.get_class()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "np.sum(data.Y != classifier(data))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "435"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Probabilities for democrat:\n",
      "0.995182817108 democrat\n",
      "0.1670249087 democrat\n",
      "0.0812221255942 republican\n"
     ]
    }
   ],
   "source": [
    "target_class = 1\n",
    "print(\"Probabilities for %s:\" % data.domain.class_var.values[target_class])\n",
    "probabilities = classifier(data, 1)\n",
    "for p, d in zip(probabilities[5:8], data[5:8]):\n",
    "    print(p[target_class], d.get_class())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Разделить выборку на тестовую и обучающую\n",
    "* Обучить классификаторы: дерево принятия решений, логистическую регрессию и ближайших соседей\n",
    "* Вывести таблицу вероятностей классов для республиканцев в тестовой выборке \n",
    "* Посчитать accuracy и AUC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import random\n",
    "random.seed(42)\n",
    "# ваш код"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Orange - регрессия"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "RM (22.533: 506.0)\n",
      ": <=6.941\n",
      "   LSTAT (19.934: 430.0)\n",
      "   : <=14.4 --> (23.35: 255.0)\n",
      "   : >14.4 --> (14.956: 175.0)\n",
      ": >6.941\n",
      "   RM (37.238: 76.0)\n",
      "   : <=7.437 --> (32.113: 46.0)\n",
      "   : >7.437 --> (45.097: 30.0)\n"
     ]
    }
   ],
   "source": [
    "data = Orange.data.Table(\"housing.tab\")\n",
    "tree_learner = Orange.classification.SimpleTreeLearner(max_depth=2)\n",
    "tree = tree_learner(data)\n",
    "print(tree.to_string())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "random.seed(42)\n",
    "data = Orange.data.Table(\"housing\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Разделить выборку на тестовую и обучающую\n",
    "* Обучить регрессоры: LinearRegressionLearner, RandomForestRegressionLearner, RidgeRegressionLearner\n",
    "* Проверить на тестовой выборке"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# ваш код"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda root]",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
